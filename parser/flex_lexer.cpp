#line 2 "flex_lexer.cpp"

#line 4 "flex_lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 6
#define YY_FLEX_SUBMINOR_VERSION 4
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

#ifdef yy_create_buffer
#define ff__create_buffer_ALREADY_DEFINED
#else
#define yy_create_buffer ff__create_buffer
#endif

#ifdef yy_delete_buffer
#define ff__delete_buffer_ALREADY_DEFINED
#else
#define yy_delete_buffer ff__delete_buffer
#endif

#ifdef yy_scan_buffer
#define ff__scan_buffer_ALREADY_DEFINED
#else
#define yy_scan_buffer ff__scan_buffer
#endif

#ifdef yy_scan_string
#define ff__scan_string_ALREADY_DEFINED
#else
#define yy_scan_string ff__scan_string
#endif

#ifdef yy_scan_bytes
#define ff__scan_bytes_ALREADY_DEFINED
#else
#define yy_scan_bytes ff__scan_bytes
#endif

#ifdef yy_init_buffer
#define ff__init_buffer_ALREADY_DEFINED
#else
#define yy_init_buffer ff__init_buffer
#endif

#ifdef yy_flush_buffer
#define ff__flush_buffer_ALREADY_DEFINED
#else
#define yy_flush_buffer ff__flush_buffer
#endif

#ifdef yy_load_buffer_state
#define ff__load_buffer_state_ALREADY_DEFINED
#else
#define yy_load_buffer_state ff__load_buffer_state
#endif

#ifdef yy_switch_to_buffer
#define ff__switch_to_buffer_ALREADY_DEFINED
#else
#define yy_switch_to_buffer ff__switch_to_buffer
#endif

#ifdef yypush_buffer_state
#define ff_push_buffer_state_ALREADY_DEFINED
#else
#define yypush_buffer_state ff_push_buffer_state
#endif

#ifdef yypop_buffer_state
#define ff_pop_buffer_state_ALREADY_DEFINED
#else
#define yypop_buffer_state ff_pop_buffer_state
#endif

#ifdef yyensure_buffer_stack
#define ff_ensure_buffer_stack_ALREADY_DEFINED
#else
#define yyensure_buffer_stack ff_ensure_buffer_stack
#endif

#ifdef yylex
#define ff_lex_ALREADY_DEFINED
#else
#define yylex ff_lex
#endif

#ifdef yyrestart
#define ff_restart_ALREADY_DEFINED
#else
#define yyrestart ff_restart
#endif

#ifdef yylex_init
#define ff_lex_init_ALREADY_DEFINED
#else
#define yylex_init ff_lex_init
#endif

#ifdef yylex_init_extra
#define ff_lex_init_extra_ALREADY_DEFINED
#else
#define yylex_init_extra ff_lex_init_extra
#endif

#ifdef yylex_destroy
#define ff_lex_destroy_ALREADY_DEFINED
#else
#define yylex_destroy ff_lex_destroy
#endif

#ifdef yyget_debug
#define ff_get_debug_ALREADY_DEFINED
#else
#define yyget_debug ff_get_debug
#endif

#ifdef yyset_debug
#define ff_set_debug_ALREADY_DEFINED
#else
#define yyset_debug ff_set_debug
#endif

#ifdef yyget_extra
#define ff_get_extra_ALREADY_DEFINED
#else
#define yyget_extra ff_get_extra
#endif

#ifdef yyset_extra
#define ff_set_extra_ALREADY_DEFINED
#else
#define yyset_extra ff_set_extra
#endif

#ifdef yyget_in
#define ff_get_in_ALREADY_DEFINED
#else
#define yyget_in ff_get_in
#endif

#ifdef yyset_in
#define ff_set_in_ALREADY_DEFINED
#else
#define yyset_in ff_set_in
#endif

#ifdef yyget_out
#define ff_get_out_ALREADY_DEFINED
#else
#define yyget_out ff_get_out
#endif

#ifdef yyset_out
#define ff_set_out_ALREADY_DEFINED
#else
#define yyset_out ff_set_out
#endif

#ifdef yyget_leng
#define ff_get_leng_ALREADY_DEFINED
#else
#define yyget_leng ff_get_leng
#endif

#ifdef yyget_text
#define ff_get_text_ALREADY_DEFINED
#else
#define yyget_text ff_get_text
#endif

#ifdef yyget_lineno
#define ff_get_lineno_ALREADY_DEFINED
#else
#define yyget_lineno ff_get_lineno
#endif

#ifdef yyset_lineno
#define ff_set_lineno_ALREADY_DEFINED
#else
#define yyset_lineno ff_set_lineno
#endif

#ifdef yyget_column
#define ff_get_column_ALREADY_DEFINED
#else
#define yyget_column ff_get_column
#endif

#ifdef yyset_column
#define ff_set_column_ALREADY_DEFINED
#else
#define yyset_column ff_set_column
#endif

#ifdef yywrap
#define ff_wrap_ALREADY_DEFINED
#else
#define yywrap ff_wrap
#endif

#ifdef yyget_lval
#define ff_get_lval_ALREADY_DEFINED
#else
#define yyget_lval ff_get_lval
#endif

#ifdef yyset_lval
#define ff_set_lval_ALREADY_DEFINED
#else
#define yyset_lval ff_set_lval
#endif

#ifdef yyget_lloc
#define ff_get_lloc_ALREADY_DEFINED
#else
#define yyget_lloc ff_get_lloc
#endif

#ifdef yyset_lloc
#define ff_set_lloc_ALREADY_DEFINED
#else
#define yyset_lloc ff_set_lloc
#endif

#ifdef yyalloc
#define ff_alloc_ALREADY_DEFINED
#else
#define yyalloc ff_alloc
#endif

#ifdef yyrealloc
#define ff_realloc_ALREADY_DEFINED
#else
#define yyrealloc ff_realloc
#endif

#ifdef yyfree
#define ff_free_ALREADY_DEFINED
#else
#define yyfree ff_free
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#ifndef SIZE_MAX
#define SIZE_MAX               (~(size_t)0)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */

/* TODO: this is always defined, so inline it */
#define yyconst const

#if defined(__GNUC__) && __GNUC__ >= 3
#define yynoreturn __attribute__((__noreturn__))
#else
#define yynoreturn
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an
 *   integer in range [0..255] for use as an array index.
 */
#define YY_SC_TO_UI(c) ((YY_CHAR) (c))

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *
/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START
/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)
/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin , yyscanner )
#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2
    
    #define YY_LESS_LINENO(n)
    #define YY_LINENO_REWIND_TO(ptr)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )
#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	int yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)
/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void yyrestart ( FILE *input_file , yyscan_t yyscanner );
void yy_switch_to_buffer ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
YY_BUFFER_STATE yy_create_buffer ( FILE *file, int size , yyscan_t yyscanner );
void yy_delete_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yy_flush_buffer ( YY_BUFFER_STATE b , yyscan_t yyscanner );
void yypush_buffer_state ( YY_BUFFER_STATE new_buffer , yyscan_t yyscanner );
void yypop_buffer_state ( yyscan_t yyscanner );

static void yyensure_buffer_stack ( yyscan_t yyscanner );
static void yy_load_buffer_state ( yyscan_t yyscanner );
static void yy_init_buffer ( YY_BUFFER_STATE b, FILE *file , yyscan_t yyscanner );
#define YY_FLUSH_BUFFER yy_flush_buffer( YY_CURRENT_BUFFER , yyscanner)

YY_BUFFER_STATE yy_scan_buffer ( char *base, yy_size_t size , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_string ( const char *yy_str , yyscan_t yyscanner );
YY_BUFFER_STATE yy_scan_bytes ( const char *bytes, int len , yyscan_t yyscanner );

void *yyalloc ( yy_size_t , yyscan_t yyscanner );
void *yyrealloc ( void *, yy_size_t , yyscan_t yyscanner );
void yyfree ( void * , yyscan_t yyscanner );

#define yy_new_buffer yy_create_buffer
#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}
#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}
#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define ff_wrap(yyscanner) (/*CONSTCOND*/1)
#define YY_SKIP_YYWRAP
typedef flex_uint8_t YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state ( yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans ( yy_state_type current_state  , yyscan_t yyscanner);
static int yy_get_next_buffer ( yyscan_t yyscanner );
static void yynoreturn yy_fatal_error ( const char* msg , yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;
#define YY_NUM_RULES 208
#define YY_END_OF_BUFFER 209
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static const flex_int16_t yy_accept[791] =
    {   0,
        0,    0,    0,    0,  204,  204,  209,  207,  206,  206,
      207,  207,  172,  202,    5,    6,  170,  142,   10,  139,
      169,  171,  199,    1,  153,   71,  152,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  164,  165,  173,  204,  205,  206,  151,    0,  199,
      198,  197,  154,  155,  201,  201,  201,  201,  201,  201,
      201,   11,  201,  201,  201,  201,  201,   13,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  168,  201,  143,  141,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
       60,  201,  201,   30,  201,   56,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  103,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  204,  203,  200,  197,  201,
      105,  201,  201,   45,  201,   15,  201,   41,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  160,  194,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  145,  201,

      201,  201,  201,  201,  201,  201,  201,  201,  201,   53,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  185,  201,  201,  201,  101,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,   29,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,   23,  201,  201,   93,  201,  201,  201,  201,
       75,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,

      201,  201,  201,  201,  201,  201,  144,  138,  177,  201,
      201,  201,  201,   80,  201,  201,  201,  201,  201,  201,
      201,  201,   42,  201,  123,  201,  201,   90,  201,  201,
       54,  146,  201,  201,  174,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,   27,  127,  201,   50,  201,
      201,  159,  201,  201,  201,  201,  201,  201,   97,  201,
      201,  201,   32,  109,   62,   34,   48,  201,  201,   81,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,   82,  117,  201,  201,  201,  201,  201,  148,  201,
      201,  201,  201,  189,  201,  201,  201,  201,  201,  201,

       17,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  201,  179,  150,  201,  201,  166,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,   55,  201,  149,
      201,  201,   43,  162,  201,   89,  201,    2,  163,  201,
      201,  201,  201,  201,  201,   49,  201,  201,  131,  201,
      201,  201,  201,  201,   37,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,  201,
      201,  167,   61,   65,  190,  201,  107,  201,  201,   24,
      201,  201,  201,   51,   36,  201,  201,  201,  201,  201,
      201,   38,  137,  201,  201,  126,  201,  201,   73,  201,

      161,  201,  201,  184,  201,  201,  201,   40,   35,  201,
      201,  201,  201,   16,  201,  201,  201,  201,  201,  201,
      201,  201,  201,  201,  201,  201,  201,  201,  201,    3,
      201,  201,  201,  201,  201,  201,  201,    8,  201,  201,
       31,  201,   98,  201,  201,   26,  201,  201,  130,  201,
      201,   88,  201,  188,  175,  201,  201,  201,  104,  201,
      201,  201,   47,  201,  201,  201,  201,  201,   85,  201,
      201,  191,  201,  201,  110,  201,  201,  147,  201,  201,
      201,  201,   18,   25,  201,   69,  201,  201,   86,  201,
      201,  201,  140,  201,  201,  201,  124,  158,  201,  201,

      201,   39,  135,  201,  201,  201,  201,  201,  201,  201,
      201,  102,  201,  201,  201,  157,  201,    7,   83,  129,
      201,  201,  201,  201,  201,  201,  201,    4,  201,  201,
      113,   87,  201,   99,  201,  201,    9,  201,  201,  201,
       14,  196,   92,  201,  201,   68,  201,  201,   22,  193,
       63,   77,   95,  108,  201,  201,   64,  201,  201,  156,
      201,  114,  201,  201,   28,   79,  201,  186,  201,   78,
      201,  201,  201,  201,   33,  195,  128,  201,  201,  201,
      106,  201,  201,  201,   57,  201,  201,  201,  201,  116,
      122,  201,  201,  201,   52,  201,  201,  201,  178,  118,

      112,  201,  201,  136,  201,  201,  201,  201,   46,  201,
      133,  201,  201,  115,  201,  201,  201,  182,  201,  201,
      183,  201,  201,  201,  201,  201,  201,   91,  201,   76,
      187,  201,  201,  180,  201,  201,  201,   70,  201,  176,
      201,  201,  201,  100,   84,   21,  201,  201,  119,  201,
      201,   12,   20,  192,   44,   67,  201,  201,  134,   74,
       19,   72,  201,  201,  201,   66,  132,  201,  201,  201,
      181,  125,   59,  111,  201,  201,  201,  201,  201,  201,
      201,  201,  201,   94,  201,  121,   96,   58,  120,    0
    } ;

static const YY_CHAR yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    1,    1,    6,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   16,   16,
       16,   16,   16,   16,   16,   16,   16,    1,   17,   18,
       19,   20,    1,    1,   21,   22,   23,   24,   25,   26,
       27,   28,   29,   30,   31,   32,   33,   34,   35,   36,
       37,   38,   39,   40,   41,   42,   43,   44,   45,   46,
       47,    1,   48,   49,   50,    1,   51,   52,   53,   54,

       55,   56,   57,   58,   59,   60,   61,   62,   63,   64,
       65,   66,   67,   68,   69,   70,   71,   72,   73,   74,
       75,   46,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static const YY_CHAR yy_meta[76] =
    {   0,
        1,    1,    2,    1,    2,    1,    3,    1,    1,    1,
        1,    1,    1,    1,    1,    4,    1,    1,    1,    1,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    1,    1,    1,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4
    } ;

static const flex_int16_t yy_base[795] =
    {   0,
        0,    0,    0,    0,  327,  326,  329, 1566,   74,   76,
      307,    0, 1566, 1566, 1566, 1566, 1566, 1566, 1566,  301,
      263, 1566,   66, 1566,  257, 1566,  256,   60,   60,   69,
      120,  112,  175,   43,   67,  125,   52,   66,  118,  176,
      127,  221,  149,    0,  187,  269,  319,  185,  185,  174,
       68, 1566, 1566, 1566,    0,  265,  106, 1566,  263,  122,
      251,  248, 1566, 1566,    0,   72,  130,  120,  188,  169,
      161,  186,  190,  230,  239,  218,  223,    0,  226,  253,
      248,  288,  231,  226,  299,  249,  249,  272,  279,  282,
      296,  282,  338,  327,  298,  325,  306,  334,  323,  333,

      338,  343,  348,  335,    0,  347,  392,  349,  361,  346,
      361,  381,  377,  399,  374,  403,  383,  384,  379,  395,
      395,  392,  413,    0,  403,  421,  410,  426,  422,  445,
      433,  484,  425,  459,  455,  446,  462,  463,  453,  451,
      465,  459,  464,  460,    0,  498,  466,  512,  472,  472,
      511,  503,  477,  511,  509,    0, 1566, 1566,  209,  515,
        0,  521,  512,    0,  527,    0,  533,    0,  520,  521,
      516,  532,  541,  531,  540,  565,  529,  545,  529,  542,
      541,  538,  566,  555,  558,    0,  570,  580,  581,  580,
      583,  585,  575,  580,  594,  588,  594,  599,    0,  587,

      592,  595,  589,  592,  599,  601,  618,  626,  616,  631,
      617,  627,  620,  634,  634,  636,  627,  631,  642,  644,
      639,  647,  650,  647,  633,  645,  642,  643,  647,  663,
      661,  677,  673,  122,  680,  678,  675,  687,  675,  679,
      693,  700,  698,    0,  692,  700,  687,  698,  704,  706,
      694,  695,  713,  706,  714,  710,  702,  704,  722,  727,
      718,  718,  724,  735,  735,    0,  729,  732,  747,  741,
        0,  744,  751,  748,  745,  752,  742,  762,  766,  758,
      759,  770,  764,  775,  768,  779,  780,  761,  776,  789,
      783,  782,  780,  793,  792,  798,  801,  796,  117,  804,

      818,  810,  807,  821,  822,  828,    0,    0,  830,  821,
      821,  840,  815,    0,  816,  820,  837,  830,  823,  831,
      822,  828,    0,  848,    0,  851,  851,    0,  858,  855,
        0,    0,  858,  858,    0,  858,  861,  881,  878,  864,
      881,  866,  872,  884,  882,    0,  872,  878,    0,  881,
      116,    0,  878,  875,  883,  901,  885,  897,    0,  886,
      896,  896,    0,    0,    0,    0,    0,  890,  906,    0,
      900,  907,  919,  907,  912,  931,  919,  933,  927,  925,
      926,    0,    0,  927,  941,  932,  931,  933,    0,  943,
      950,  953,  951,    0,  943,  948,  945,  951,  964,  949,

        0,  962,  956,  960,  977,  978,  975,  976,  981,  995,
      994,  986,    0,    0,  982,  996,    0,  983,  984, 1001,
      995,  990,  992, 1007, 1011, 1011, 1011,    0, 1019,    0,
     1017, 1008, 1009,    0, 1011,    0, 1018,    0,    0, 1019,
     1025, 1033, 1020, 1018, 1046,    0, 1044, 1047,    0, 1042,
     1056, 1056, 1044, 1058,    0, 1050, 1064, 1054, 1062, 1064,
     1066, 1060, 1060, 1070, 1073, 1070, 1076, 1079, 1064, 1065,
     1082,    0,    0,    0,    0, 1064,    0, 1081, 1085, 1079,
     1093, 1087, 1102, 1103,    0, 1107, 1096, 1114, 1112, 1117,
     1111,    0,    0, 1119, 1107,    0, 1113, 1102,    0, 1124,

        0, 1117, 1131,    0, 1125, 1115, 1122,    0,    0, 1138,
     1137, 1123, 1125,    0, 1125, 1141, 1142, 1143, 1147, 1151,
     1148, 1163, 1159, 1150, 1172, 1174, 1172, 1181, 1176,    0,
     1166, 1184, 1181, 1182, 1170, 1177, 1183,    0, 1189, 1190,
        0, 1195, 1180, 1200, 1190,    0, 1180, 1183,    0, 1185,
     1193,    0, 1194,    0,    0, 1196, 1213, 1200,  107, 1203,
     1208, 1227,    0, 1210, 1224, 1219, 1223, 1238,    0, 1238,
     1241,    0, 1244, 1243,    0, 1242, 1240,    0, 1231, 1243,
     1240, 1231,    0,    0, 1238,    0, 1255, 1256,   56, 1244,
     1261, 1246,    0, 1241, 1258, 1248,    0,    0, 1269, 1266,

     1277,    0,    0, 1271, 1278, 1279, 1281, 1271, 1290, 1300,
     1288,    0, 1298, 1301, 1287,    0, 1286,    0,    0,    0,
     1293, 1297, 1306, 1311, 1312, 1291, 1298,    0, 1315, 1307,
        0,    0, 1302,    0, 1305, 1319,    0, 1305, 1319, 1325,
        0,    0, 1326, 1333, 1334,    0, 1324, 1338,    0,    0,
        0,    0,    0,    0, 1328, 1330,    0, 1352, 1337,    0,
     1347,    0, 1342, 1354,    0,    0, 1351,    0, 1353,    0,
     1346, 1352, 1364, 1359,    0,    0,    0, 1357, 1360, 1360,
        0, 1354, 1365, 1378,    0, 1362, 1370, 1359, 1365,    0,
        0, 1369, 1376, 1370,    0, 1393, 1395, 1394,    0,    0,

        0, 1394, 1390,    0, 1392, 1401, 1414, 1407,    0, 1417,
        0, 1418, 1417,    0, 1410, 1421, 1422,    0, 1411, 1407,
        0, 1418, 1427, 1421, 1431, 1419, 1436,    0, 1441,    0,
        0, 1418, 1439,    0, 1441, 1443, 1433,    0, 1445,    0,
     1440, 1456, 1443,    0,    0,    0, 1449, 1448,    0, 1461,
     1456,    0,    0,    0,    0,    0, 1460, 1461,    0,    0,
        0,    0, 1468, 1470, 1471,    0,    0, 1476, 1478, 1467,
        0,    0,    0,    0, 1484, 1490, 1472, 1479, 1470, 1482,
     1479, 1476, 1498,    0, 1483,    0,    0,    0,    0, 1566,
     1553, 1557,   99, 1561

    } ;

static const flex_int16_t yy_def[795] =
    {   0,
      790,    1,    1,    1,  791,  791,  790,  790,  790,  790,
      790,  792,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  790,  790,  790,  794,  790,  790,  790,  792,  790,
      790,  790,  790,  790,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  794,  790,  790,  790,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,

      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,  793,
      793,  793,  793,  793,  793,  793,  793,  793,  793,    0,
      790,  790,  790,  790

    } ;

static const flex_int16_t yy_nxt[1642] =
    {   0,
        8,    9,   10,   11,   12,   13,   14,   15,   16,   17,
       18,   19,   20,   21,   22,   23,   24,   25,   26,   27,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   44,   51,   44,   52,   53,   54,    8,
       28,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   44,   51,   57,   57,   57,   57,   62,
      101,   60,   66,   67,   74,   68,  109,  102,   75,   79,
      110,   69,  155,   70,   76,  103,   80,   71,   72,   77,

       73,  104,   65,   81,   78,  667,   82,   57,   57,   83,
      101,  160,   66,   67,   74,   68,  109,  102,   75,   79,
      110,   69,  155,   70,   76,  103,   80,   71,   72,   77,
       73,  104,   91,   81,   78,   62,   82,   60,  111,   83,
       84,  160,  112,   92,   85,   93,  113,  119,   86,  120,
      105,  106,  114,  161,   87,   94,  645,   88,  107,  162,
       89,  121,   91,  108,   90,  482,  440,  122,  111,  129,
       84,  372,  112,   92,   85,   93,  113,  119,   86,  120,
      105,  106,  114,  161,   87,   94,  130,   88,  107,  162,
       89,  121,  166,  108,   90,   95,  115,  122,  167,  129,

      116,  153,  154,   96,  117,  151,   97,  131,  168,   98,
      118,  132,   99,  152,  163,  100,  130,  147,  148,  164,
      149,  133,  166,  150,  159,   95,  115,  165,  167,  169,
      116,  153,  154,   96,  117,  151,   97,  131,  168,   98,
      118,  132,   99,  152,  163,  100,  123,  147,  148,  164,
      149,  133,  174,  150,  124,  170,  125,  165,  126,  169,
      175,  127,  128,  159,  176,  172,   61,  158,  185,  171,
      186,  157,  173,  177,   64,   63,  123,  178,   61,  179,
      180,  181,  174,  182,  124,  170,  125,  191,  126,  192,
      175,  127,  128,  134,  176,  172,  135,  136,  185,  171,

      186,  137,  173,  177,  138,  139,  193,  178,  140,  179,
      180,  181,  183,  182,  194,  195,   60,  191,  196,  192,
      197,  187,  184,  134,  188,   58,  135,  136,  790,  205,
      189,  137,   56,   56,  138,  139,  193,  190,  140,  141,
      208,  790,  183,  142,  194,  195,  143,  144,  196,  202,
      197,  187,  184,  145,  188,  203,  146,  211,  198,  205,
      189,  199,  206,  200,  212,  209,  204,  190,  207,  141,
      208,  210,  213,  142,  216,  217,  143,  144,  201,  202,
      218,  214,  225,  145,  215,  203,  146,  211,  198,  226,
      227,  199,  206,  200,  212,  209,  204,  790,  207,  228,

      790,  210,  213,  790,  216,  217,  229,  230,  201,  231,
      218,  214,  225,  235,  215,  219,  239,  240,  241,  226,
      227,  232,  242,  245,  246,  220,  236,  221,  243,  228,
      222,  223,  233,  224,  244,  237,  229,  230,  247,  231,
      238,  234,  248,  235,  249,  219,  239,  240,  241,  250,
      251,  232,  242,  245,  246,  220,  236,  221,  243,  252,
      222,  223,  233,  224,  244,  237,  255,  263,  247,  253,
      238,  234,  248,  254,  249,  267,  790,  790,  268,  250,
      251,  264,  269,  270,  271,  272,  273,  790,  276,  252,
      265,  274,  790,  277,  280,  284,  255,  263,  266,  253,

      285,  290,  275,  254,  256,  267,  257,  258,  268,  259,
      790,  264,  269,  270,  271,  272,  273,  260,  276,  261,
      265,  274,  262,  277,  280,  284,  278,  288,  266,  293,
      285,  290,  275,  281,  256,  282,  257,  258,  279,  259,
      283,  289,  286,  294,  291,  295,  296,  260,  287,  261,
      292,  297,  262,  298,  299,  300,  278,  288,  301,  293,
      302,  303,  304,  281,  305,  282,  309,  310,  279,  311,
      283,  289,  286,  294,  291,  295,  296,  312,  287,  313,
      292,  297,  314,  298,  299,  300,  315,  306,  301,  307,
      302,  303,  304,  316,  305,  317,  309,  310,  318,  311,

      319,  321,  323,  324,  308,  322,  327,  312,  320,  313,
      328,  329,  314,  325,  330,  331,  315,  306,  332,  307,
      333,  334,  326,  316,  335,  317,  336,  337,  318,  338,
      319,  321,  323,  324,  308,  322,  327,  339,  320,  340,
      328,  329,  341,  325,  330,  331,  342,  343,  332,  346,
      333,  334,  326,  344,  335,  345,  336,  337,  347,  338,
      348,  349,  350,  351,  352,  353,  354,  339,  355,  340,
      356,  357,  341,  362,  358,  360,  342,  343,  363,  346,
      364,  361,  365,  344,  359,  345,  366,  367,  347,  368,
      348,  349,  350,  351,  352,  353,  354,  369,  355,  371,

      356,  357,  373,  362,  358,  360,  374,  370,  363,  375,
      364,  361,  365,  376,  359,  377,  366,  367,  378,  368,
      381,  379,  382,  383,  384,  385,  386,  369,  387,  371,
      388,  389,  373,  380,  390,  391,  374,  370,  392,  375,
      393,  394,  395,  376,  396,  377,  397,  398,  378,  399,
      381,  379,  382,  383,  384,  385,  386,  400,  387,  405,
      388,  389,  401,  380,  390,  391,  406,  407,  392,  403,
      393,  394,  395,  402,  396,  404,  397,  398,  408,  399,
      409,  410,  411,  412,  413,  414,  415,  400,  416,  405,
      417,  418,  401,  419,  420,  423,  406,  407,  421,  403,

      422,  424,  427,  428,  429,  404,  432,  425,  408,  433,
      409,  410,  411,  412,  413,  414,  415,  434,  416,  426,
      417,  418,  430,  419,  420,  423,  431,  435,  421,  436,
      422,  424,  427,  428,  429,  437,  432,  425,  438,  433,
      439,  441,  442,  443,  444,  445,  446,  434,  447,  426,
      448,  449,  430,  450,  453,  454,  431,  435,  455,  436,
      451,  456,  457,  458,  459,  437,  460,  461,  438,  462,
      439,  441,  442,  443,  444,  445,  446,  452,  447,  463,
      448,  449,  464,  450,  453,  454,  465,  466,  455,  467,
      451,  456,  457,  458,  459,  468,  460,  461,  469,  462,

      470,  471,  472,  473,  474,  475,  476,  452,  477,  463,
      478,  479,  464,  480,  481,  483,  465,  466,  484,  467,
      485,  486,  487,  488,  489,  468,  490,  491,  469,  492,
      470,  471,  472,  473,  474,  475,  476,  493,  477,  494,
      478,  479,  495,  480,  481,  483,  496,  497,  484,  498,
      485,  486,  487,  488,  489,  499,  490,  491,  500,  492,
      501,  502,  503,  504,  505,  506,  507,  493,  508,  494,
      509,  510,  495,  513,  511,  514,  496,  497,  512,  498,
      515,  516,  517,  518,  519,  499,  520,  521,  500,  522,
      501,  502,  503,  504,  505,  506,  507,  523,  508,  524,

      509,  510,  525,  513,  511,  514,  526,  527,  512,  528,
      515,  516,  517,  518,  519,  529,  520,  521,  530,  522,
      531,  533,  534,  535,  536,  532,  537,  523,  538,  524,
      539,  540,  525,  541,  542,  543,  526,  527,  544,  528,
      545,  546,  547,  548,  549,  529,  550,  551,  530,  552,
      531,  533,  534,  535,  536,  532,  537,  553,  538,  554,
      539,  540,  555,  541,  542,  543,  556,  557,  544,  558,
      545,  546,  547,  548,  549,  559,  550,  551,  560,  552,
      561,  562,  563,  564,  565,  566,  567,  553,  568,  554,
      569,  570,  555,  571,  572,  573,  556,  557,  574,  558,

      575,  576,  577,  578,  579,  559,  580,  581,  560,  582,
      561,  562,  563,  564,  565,  566,  567,  583,  568,  584,
      569,  570,  585,  571,  572,  573,  586,  587,  574,  588,
      575,  576,  577,  578,  579,  589,  580,  581,  590,  582,
      591,  592,  593,  594,  595,  596,  597,  583,  598,  584,
      599,  600,  585,  601,  602,  603,  586,  587,  604,  588,
      606,  607,  608,  609,  610,  589,  611,  612,  590,  613,
      591,  592,  593,  594,  595,  596,  597,  605,  598,  614,
      599,  600,  615,  601,  602,  603,  616,  617,  604,  618,
      606,  607,  608,  609,  610,  619,  611,  612,  620,  613,

      621,  622,  623,  624,  625,  626,  627,  605,  628,  614,
      629,  630,  615,  631,  632,  633,  616,  617,  634,  618,
      635,  636,  637,  638,  639,  619,  640,  641,  620,  642,
      621,  622,  623,  624,  625,  626,  627,  643,  628,  644,
      629,  630,  646,  631,  632,  633,  647,  648,  634,  649,
      635,  636,  637,  638,  639,  650,  640,  641,  651,  642,
      652,  653,  654,  655,  656,  657,  658,  643,  659,  644,
      660,  661,  646,  662,  663,  664,  647,  648,  665,  649,
      666,  668,  669,  670,  671,  650,  672,  673,  651,  674,
      652,  653,  654,  655,  656,  657,  658,  675,  659,  676,

      660,  661,  677,  662,  663,  664,  678,  679,  665,  680,
      666,  668,  669,  670,  671,  681,  672,  673,  682,  674,
      683,  684,  685,  686,  687,  688,  689,  675,  690,  676,
      691,  692,  677,  693,  694,  695,  678,  679,  696,  680,
      697,  698,  699,  700,  701,  681,  702,  703,  682,  704,
      683,  684,  685,  686,  687,  688,  689,  705,  690,  706,
      691,  692,  707,  693,  694,  695,  708,  709,  696,  710,
      697,  698,  699,  700,  701,  711,  702,  703,  712,  704,
      713,  714,  715,  716,  717,  718,  719,  705,  720,  706,
      721,  722,  707,  723,  724,  725,  708,  709,  726,  710,

      727,  728,  729,  730,  731,  711,  732,  733,  712,  734,
      713,  714,  715,  716,  717,  718,  719,  735,  720,  736,
      721,  722,  737,  723,  724,  725,  738,  739,  726,  740,
      727,  728,  729,  730,  731,  741,  732,  733,  742,  734,
      743,  744,  745,  746,  747,  748,  749,  735,  750,  736,
      751,  752,  737,  753,  754,  755,  738,  739,  756,  740,
      757,  758,  759,  760,  761,  741,  762,  763,  742,  764,
      743,  744,  745,  746,  747,  748,  749,  765,  750,  766,
      751,  752,  767,  753,  754,  755,  768,  769,  756,  770,
      757,  758,  759,  760,  761,  771,  762,  763,  772,  764,

      773,  774,  775,  776,  777,  778,  779,  765,  780,  766,
      781,  782,  767,  783,  784,  785,  768,  769,  786,  770,
      787,  788,  789,  790,  790,  771,  790,  790,  772,  790,
      773,  774,  775,  776,  777,  778,  779,  790,  780,  790,
      781,  782,  790,  783,  784,  785,  790,  790,  786,  790,
      787,  788,  789,   55,   55,   55,   55,   59,  790,   59,
       59,  156,  156,  790,  156,    7,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790
    } ;

static const flex_int16_t yy_chk[1642] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    9,    9,   10,   10,   23,
       34,   23,   28,   28,   29,   28,   37,   35,   29,   30,
       38,   28,   51,   28,   29,   35,   30,   28,   28,   29,

       28,   35,  793,   30,   29,  589,   30,   57,   57,   30,
       34,   66,   28,   28,   29,   28,   37,   35,   29,   30,
       38,   28,   51,   28,   29,   35,   30,   28,   28,   29,
       28,   35,   32,   30,   29,   60,   30,   60,   39,   30,
       31,   66,   39,   32,   31,   32,   39,   41,   31,   41,
       36,   36,   39,   67,   31,   32,  559,   31,   36,   68,
       31,   41,   32,   36,   31,  351,  299,   41,   39,   43,
       31,  234,   39,   32,   31,   32,   39,   41,   31,   41,
       36,   36,   39,   67,   31,   32,   43,   31,   36,   68,
       31,   41,   70,   36,   31,   33,   40,   41,   71,   43,

       40,   50,   50,   33,   40,   49,   33,   45,   72,   33,
       40,   45,   33,   49,   69,   33,   43,   48,   48,   69,
       48,   45,   70,   48,  159,   33,   40,   69,   71,   73,
       40,   50,   50,   33,   40,   49,   33,   45,   72,   33,
       40,   45,   33,   49,   69,   33,   42,   48,   48,   69,
       48,   45,   76,   48,   42,   74,   42,   69,   42,   73,
       77,   42,   42,   62,   79,   75,   61,   59,   83,   74,
       84,   56,   75,   80,   27,   25,   42,   80,   21,   81,
       81,   81,   76,   81,   42,   74,   42,   86,   42,   87,
       77,   42,   42,   46,   79,   75,   46,   46,   83,   74,

       84,   46,   75,   80,   46,   46,   88,   80,   46,   81,
       81,   81,   82,   81,   89,   90,   20,   86,   91,   87,
       92,   85,   82,   46,   85,   11,   46,   46,    7,   95,
       85,   46,    6,    5,   46,   46,   88,   85,   46,   47,
       97,    0,   82,   47,   89,   90,   47,   47,   91,   94,
       92,   85,   82,   47,   85,   94,   47,   99,   93,   95,
       85,   93,   96,   93,  100,   98,   94,   85,   96,   47,
       97,   98,  101,   47,  103,  104,   47,   47,   93,   94,
      106,  102,  108,   47,  102,   94,   47,   99,   93,  109,
      110,   93,   96,   93,  100,   98,   94,    0,   96,  111,

        0,   98,  101,    0,  103,  104,  112,  113,   93,  113,
      106,  102,  108,  115,  102,  107,  117,  118,  119,  109,
      110,  114,  120,  122,  122,  107,  116,  107,  121,  111,
      107,  107,  114,  107,  121,  116,  112,  113,  123,  113,
      116,  114,  125,  115,  126,  107,  117,  118,  119,  127,
      128,  114,  120,  122,  122,  107,  116,  107,  121,  129,
      107,  107,  114,  107,  121,  116,  131,  133,  123,  130,
      116,  114,  125,  130,  126,  135,    0,    0,  136,  127,
      128,  134,  137,  138,  139,  140,  141,    0,  143,  129,
      134,  142,    0,  144,  147,  149,  131,  133,  134,  130,

      150,  153,  142,  130,  132,  135,  132,  132,  136,  132,
        0,  134,  137,  138,  139,  140,  141,  132,  143,  132,
      134,  142,  132,  144,  147,  149,  146,  152,  134,  155,
      150,  153,  142,  148,  132,  148,  132,  132,  146,  132,
      148,  152,  151,  160,  154,  162,  163,  132,  151,  132,
      154,  165,  132,  167,  169,  170,  146,  152,  171,  155,
      172,  173,  174,  148,  175,  148,  177,  178,  146,  179,
      148,  152,  151,  160,  154,  162,  163,  180,  151,  181,
      154,  165,  182,  167,  169,  170,  183,  176,  171,  176,
      172,  173,  174,  184,  175,  185,  177,  178,  187,  179,

      188,  189,  190,  191,  176,  189,  192,  180,  188,  181,
      193,  194,  182,  191,  195,  196,  183,  176,  197,  176,
      198,  200,  191,  184,  201,  185,  202,  203,  187,  204,
      188,  189,  190,  191,  176,  189,  192,  205,  188,  206,
      193,  194,  207,  191,  195,  196,  208,  209,  197,  211,
      198,  200,  191,  210,  201,  210,  202,  203,  212,  204,
      213,  214,  215,  216,  217,  218,  219,  205,  220,  206,
      221,  222,  207,  225,  223,  224,  208,  209,  226,  211,
      227,  224,  228,  210,  223,  210,  229,  230,  212,  231,
      213,  214,  215,  216,  217,  218,  219,  232,  220,  233,

      221,  222,  235,  225,  223,  224,  236,  232,  226,  237,
      227,  224,  228,  238,  223,  239,  229,  230,  240,  231,
      242,  241,  243,  245,  246,  247,  248,  232,  249,  233,
      250,  251,  235,  241,  252,  253,  236,  232,  254,  237,
      255,  256,  257,  238,  258,  239,  259,  260,  240,  261,
      242,  241,  243,  245,  246,  247,  248,  262,  249,  265,
      250,  251,  263,  241,  252,  253,  267,  268,  254,  264,
      255,  256,  257,  263,  258,  264,  259,  260,  269,  261,
      270,  272,  273,  274,  275,  276,  277,  262,  278,  265,
      279,  280,  263,  281,  282,  284,  267,  268,  283,  264,

      283,  285,  287,  288,  289,  264,  291,  286,  269,  292,
      270,  272,  273,  274,  275,  276,  277,  293,  278,  286,
      279,  280,  290,  281,  282,  284,  290,  294,  283,  295,
      283,  285,  287,  288,  289,  296,  291,  286,  297,  292,
      298,  300,  301,  302,  303,  304,  305,  293,  306,  286,
      309,  310,  290,  311,  313,  315,  290,  294,  316,  295,
      312,  317,  318,  319,  320,  296,  321,  322,  297,  324,
      298,  300,  301,  302,  303,  304,  305,  312,  306,  326,
      309,  310,  327,  311,  313,  315,  329,  330,  316,  333,
      312,  317,  318,  319,  320,  334,  321,  322,  336,  324,

      337,  338,  339,  340,  341,  342,  343,  312,  344,  326,
      345,  347,  327,  348,  350,  353,  329,  330,  354,  333,
      355,  356,  357,  358,  360,  334,  361,  362,  336,  368,
      337,  338,  339,  340,  341,  342,  343,  369,  344,  371,
      345,  347,  372,  348,  350,  353,  373,  374,  354,  375,
      355,  356,  357,  358,  360,  376,  361,  362,  377,  368,
      378,  379,  380,  381,  384,  385,  386,  369,  387,  371,
      388,  390,  372,  392,  391,  393,  373,  374,  391,  375,
      395,  396,  397,  398,  399,  376,  400,  402,  377,  403,
      378,  379,  380,  381,  384,  385,  386,  404,  387,  405,

      388,  390,  406,  392,  391,  393,  407,  408,  391,  409,
      395,  396,  397,  398,  399,  410,  400,  402,  411,  403,
      412,  415,  416,  418,  419,  412,  420,  404,  421,  405,
      422,  423,  406,  424,  425,  426,  407,  408,  427,  409,
      429,  431,  432,  433,  435,  410,  437,  440,  411,  441,
      412,  415,  416,  418,  419,  412,  420,  442,  421,  443,
      422,  423,  444,  424,  425,  426,  445,  447,  427,  448,
      429,  431,  432,  433,  435,  450,  437,  440,  451,  441,
      452,  453,  454,  456,  457,  458,  459,  442,  460,  443,
      461,  462,  444,  463,  464,  465,  445,  447,  466,  448,

      467,  468,  469,  470,  471,  450,  476,  478,  451,  479,
      452,  453,  454,  456,  457,  458,  459,  480,  460,  481,
      461,  462,  482,  463,  464,  465,  483,  484,  466,  486,
      467,  468,  469,  470,  471,  487,  476,  478,  488,  479,
      489,  490,  491,  494,  495,  497,  498,  480,  500,  481,
      502,  503,  482,  505,  506,  507,  483,  484,  510,  486,
      511,  512,  513,  515,  516,  487,  517,  518,  488,  519,
      489,  490,  491,  494,  495,  497,  498,  510,  500,  520,
      502,  503,  521,  505,  506,  507,  522,  523,  510,  524,
      511,  512,  513,  515,  516,  525,  517,  518,  526,  519,

      527,  528,  529,  531,  532,  533,  534,  510,  535,  520,
      536,  537,  521,  539,  540,  542,  522,  523,  543,  524,
      544,  545,  547,  548,  550,  525,  551,  553,  526,  556,
      527,  528,  529,  531,  532,  533,  534,  557,  535,  558,
      536,  537,  560,  539,  540,  542,  561,  562,  543,  564,
      544,  545,  547,  548,  550,  565,  551,  553,  566,  556,
      567,  568,  570,  571,  573,  574,  576,  557,  577,  558,
      579,  580,  560,  581,  582,  585,  561,  562,  587,  564,
      588,  590,  591,  592,  594,  565,  595,  596,  566,  599,
      567,  568,  570,  571,  573,  574,  576,  600,  577,  601,

      579,  580,  604,  581,  582,  585,  605,  606,  587,  607,
      588,  590,  591,  592,  594,  608,  595,  596,  609,  599,
      610,  611,  613,  614,  615,  617,  621,  600,  622,  601,
      623,  624,  604,  625,  626,  627,  605,  606,  629,  607,
      630,  633,  635,  636,  638,  608,  639,  640,  609,  643,
      610,  611,  613,  614,  615,  617,  621,  644,  622,  645,
      623,  624,  647,  625,  626,  627,  648,  655,  629,  656,
      630,  633,  635,  636,  638,  658,  639,  640,  659,  643,
      661,  663,  664,  667,  669,  671,  672,  644,  673,  645,
      674,  678,  647,  679,  680,  682,  648,  655,  683,  656,

      684,  686,  687,  688,  689,  658,  692,  693,  659,  694,
      661,  663,  664,  667,  669,  671,  672,  696,  673,  697,
      674,  678,  698,  679,  680,  682,  702,  703,  683,  705,
      684,  686,  687,  688,  689,  706,  692,  693,  707,  694,
      708,  710,  712,  713,  715,  716,  717,  696,  719,  697,
      720,  722,  698,  723,  724,  725,  702,  703,  726,  705,
      727,  729,  732,  733,  735,  706,  736,  737,  707,  739,
      708,  710,  712,  713,  715,  716,  717,  741,  719,  742,
      720,  722,  743,  723,  724,  725,  747,  748,  726,  750,
      727,  729,  732,  733,  735,  751,  736,  737,  757,  739,

      758,  763,  764,  765,  768,  769,  770,  741,  775,  742,
      776,  777,  743,  778,  779,  780,  747,  748,  781,  750,
      782,  783,  785,    0,    0,  751,    0,    0,  757,    0,
      758,  763,  764,  765,  768,  769,  770,    0,  775,    0,
      776,  777,    0,  778,  779,  780,    0,    0,  781,    0,
      782,  783,  785,  791,  791,  791,  791,  792,    0,  792,
      792,  794,  794,    0,  794,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,

      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790,  790,  790,  790,  790,  790,  790,  790,  790,  790,
      790
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "flex.l"
#line 2 "flex.l"
#include "bison_parser.h"
#include <stdio.h>
#include <sstream>
#include <string>
#include <cstring>
#define TOKEN(name) { return SQL_##name; }
static thread_local std::stringstream strbuf;
#line 1290 "flex_lexer.cpp"
#line 12 "flex.l"

#define YYLTYPE_IS_DECLARED 1

#define YY_USER_ACTION \
    yylloc->first_line = yylloc->last_line; \
    yylloc->first_column = yylloc->last_column; \
    for(int i = 0; yytext[i] != '\0'; i++) { \
        if(yytext[i] == '\n') { \
            yylloc->last_line++; \
            yylloc->last_column = 0; \
        } \
        else { \
            yylloc->last_column++; \
        } \
    }   
#line 1307 "flex_lexer.cpp"

#line 1309 "flex_lexer.cpp"

#define INITIAL 0
#define COMMENT 1
#define singlequotedstring 2

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    int yy_n_chars;
    int yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals ( yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int yylex_init (yyscan_t* scanner);

int yylex_init_extra ( YY_EXTRA_TYPE user_defined, yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int yylex_destroy ( yyscan_t yyscanner );

int yyget_debug ( yyscan_t yyscanner );

void yyset_debug ( int debug_flag , yyscan_t yyscanner );

YY_EXTRA_TYPE yyget_extra ( yyscan_t yyscanner );

void yyset_extra ( YY_EXTRA_TYPE user_defined , yyscan_t yyscanner );

FILE *yyget_in ( yyscan_t yyscanner );

void yyset_in  ( FILE * _in_str , yyscan_t yyscanner );

FILE *yyget_out ( yyscan_t yyscanner );

void yyset_out  ( FILE * _out_str , yyscan_t yyscanner );

			int yyget_leng ( yyscan_t yyscanner );

char *yyget_text ( yyscan_t yyscanner );

int yyget_lineno ( yyscan_t yyscanner );

void yyset_lineno ( int _line_number , yyscan_t yyscanner );

int yyget_column  ( yyscan_t yyscanner );

void yyset_column ( int _column_no , yyscan_t yyscanner );

YYSTYPE * yyget_lval ( yyscan_t yyscanner );

void yyset_lval ( YYSTYPE * yylval_param , yyscan_t yyscanner );

       YYLTYPE *yyget_lloc ( yyscan_t yyscanner );
    
        void yyset_lloc ( YYLTYPE * yylloc_param , yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap ( yyscan_t yyscanner );
#else
extern int yywrap ( yyscan_t yyscanner );
#endif
#endif

#ifndef YY_NO_UNPUT
    
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy ( char *, const char *, int , yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen ( const char * , yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput ( yyscan_t yyscanner );
#else
static int input ( yyscan_t yyscanner );
#endif

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, (size_t) yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		int n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = (int) fread(buf, 1, (yy_size_t) max_size, yyin)) == 0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner);

#define YY_DECL int yylex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK /*LINTED*/break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	yy_state_type yy_current_state;
	char *yy_cp, *yy_bp;
	int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			yyensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
		}

		yy_load_buffer_state( yyscanner );
		}

	{
#line 44 "flex.l"

#line 1595 "flex_lexer.cpp"

	while ( /*CONSTCOND*/1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 791 )
					yy_c = yy_meta[yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 790 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 45 "flex.l"
TOKEN(OP_SEMI)
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 46 "flex.l"
TOKEN(ALTER)
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 47 "flex.l"
TOKEN(TABLE)
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 48 "flex.l"
TOKEN(UMINUS)
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 49 "flex.l"
TOKEN(OP_LP)
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 50 "flex.l"
TOKEN(OP_RP)
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 51 "flex.l"
TOKEN(SELECT)
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 52 "flex.l"
TOKEN(UNION)
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 53 "flex.l"
TOKEN(WINDOW)
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 54 "flex.l"
TOKEN(OP_COMMA)
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 55 "flex.l"
TOKEN(AS)
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 56 "flex.l"
TOKEN(PARTITION)
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 57 "flex.l"
TOKEN(BY)
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 58 "flex.l"
TOKEN(BETWEEN)
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 59 "flex.l"
TOKEN(AND)
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 60 "flex.l"
TOKEN(RANGE)
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 61 "flex.l"
TOKEN(ROWS)
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 62 "flex.l"
TOKEN(GROUPS)
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 63 "flex.l"
TOKEN(UNBOUNDED)
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 64 "flex.l"
TOKEN(PRECEDING)
	YY_BREAK
case 21:
YY_RULE_SETUP
#line 65 "flex.l"
TOKEN(FOLLOWING)
	YY_BREAK
case 22:
YY_RULE_SETUP
#line 66 "flex.l"
TOKEN(CURRENT)
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 67 "flex.l"
TOKEN(ROW)
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 68 "flex.l"
TOKEN(GROUP)
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 69 "flex.l"
TOKEN(HAVING)
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 70 "flex.l"
TOKEN(WHERE)
	YY_BREAK
case 27:
YY_RULE_SETUP
#line 71 "flex.l"
TOKEN(FROM)
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 72 "flex.l"
TOKEN(INDEXED)
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 73 "flex.l"
TOKEN(NOT)
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 74 "flex.l"
TOKEN(ON)
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 75 "flex.l"
TOKEN(USING)
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 76 "flex.l"
TOKEN(JOIN)
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 77 "flex.l"
TOKEN(NATURAL)
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 78 "flex.l"
TOKEN(LEFT)
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 79 "flex.l"
TOKEN(OUTER)
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 80 "flex.l"
TOKEN(INNER)
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 81 "flex.l"
TOKEN(CROSS)
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 82 "flex.l"
TOKEN(LIMIT)
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 83 "flex.l"
TOKEN(OFFSET)
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 84 "flex.l"
TOKEN(ORDER)
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 85 "flex.l"
TOKEN(ASC)
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 86 "flex.l"
TOKEN(DESC)
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 87 "flex.l"
TOKEN(WITH)
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 88 "flex.l"
TOKEN(RECURSIVE)
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 89 "flex.l"
TOKEN(ALL)
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 90 "flex.l"
TOKEN(DISTINCT)
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 91 "flex.l"
TOKEN(CREATE)
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 92 "flex.l"
TOKEN(LIKE)
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 93 "flex.l"
TOKEN(BTREE)
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 94 "flex.l"
TOKEN(HASH)
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 95 "flex.l"
TOKEN(INDEX)
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 96 "flex.l"
TOKEN(TRIGGER)
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 97 "flex.l"
TOKEN(FOR)
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 98 "flex.l"
TOKEN(EACH)
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 99 "flex.l"
TOKEN(VIEW)
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 100 "flex.l"
TOKEN(OR)
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 101 "flex.l"
TOKEN(REPLACE)
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 102 "flex.l"
TOKEN(INSERT_METHOD)
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 103 "flex.l"
TOKEN(ROW_FORMAT)
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 104 "flex.l"
TOKEN(NO)
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 105 "flex.l"
TOKEN(FIRST)
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 106 "flex.l"
TOKEN(LAST)
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 107 "flex.l"
TOKEN(DEFAULT)
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 108 "flex.l"
TOKEN(DYNAMIC)
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 109 "flex.l"
TOKEN(FIXED)
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 110 "flex.l"
TOKEN(COMPRESSED)
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 111 "flex.l"
TOKEN(REDUNDANT)
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 112 "flex.l"
TOKEN(COMPACT)
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 113 "flex.l"
TOKEN(IGNORE)
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 114 "flex.l"
TOKEN(ALGORITHM)
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 115 "flex.l"
TOKEN(OP_EQUAL)
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 116 "flex.l"
TOKEN(UNDEFINED)
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 117 "flex.l"
TOKEN(MERGE)
	YY_BREAK
case 74:
YY_RULE_SETUP
#line 118 "flex.l"
TOKEN(TEMPTABLE)
	YY_BREAK
case 75:
YY_RULE_SETUP
#line 119 "flex.l"
TOKEN(SQL)
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 120 "flex.l"
TOKEN(SECURITY)
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 121 "flex.l"
TOKEN(DEFINER)
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 122 "flex.l"
TOKEN(INVOKER)
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 123 "flex.l"
TOKEN(INPLACE)
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 124 "flex.l"
TOKEN(COPY)
	YY_BREAK
case 81:
YY_RULE_SETUP
#line 125 "flex.l"
TOKEN(LOCK)
	YY_BREAK
case 82:
YY_RULE_SETUP
#line 126 "flex.l"
TOKEN(NONE)
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 127 "flex.l"
TOKEN(SHARED)
	YY_BREAK
case 84:
YY_RULE_SETUP
#line 128 "flex.l"
TOKEN(EXCLUSIVE)
	YY_BREAK
case 85:
YY_RULE_SETUP
#line 129 "flex.l"
TOKEN(DELETE)
	YY_BREAK
case 86:
YY_RULE_SETUP
#line 130 "flex.l"
TOKEN(INSERT)
	YY_BREAK
case 87:
YY_RULE_SETUP
#line 131 "flex.l"
TOKEN(UPDATE)
	YY_BREAK
case 88:
YY_RULE_SETUP
#line 132 "flex.l"
TOKEN(BEFORE)
	YY_BREAK
case 89:
YY_RULE_SETUP
#line 133 "flex.l"
TOKEN(AFTER)
	YY_BREAK
case 90:
YY_RULE_SETUP
#line 134 "flex.l"
TOKEN(DROP)
	YY_BREAK
case 91:
YY_RULE_SETUP
#line 135 "flex.l"
TOKEN(RESTRICT)
	YY_BREAK
case 92:
YY_RULE_SETUP
#line 136 "flex.l"
TOKEN(CASCADE)
	YY_BREAK
case 93:
YY_RULE_SETUP
#line 137 "flex.l"
TOKEN(SET)
	YY_BREAK
case 94:
YY_RULE_SETUP
#line 138 "flex.l"
TOKEN(LOW_PRIORITY)
	YY_BREAK
case 95:
YY_RULE_SETUP
#line 139 "flex.l"
TOKEN(DELAYED)
	YY_BREAK
case 96:
YY_RULE_SETUP
#line 140 "flex.l"
TOKEN(HIGH_PRIORITY)
	YY_BREAK
case 97:
YY_RULE_SETUP
#line 141 "flex.l"
TOKEN(INTO)
	YY_BREAK
case 98:
YY_RULE_SETUP
#line 142 "flex.l"
TOKEN(VALUE)
	YY_BREAK
case 99:
YY_RULE_SETUP
#line 143 "flex.l"
TOKEN(VALUES)
	YY_BREAK
case 100:
YY_RULE_SETUP
#line 144 "flex.l"
TOKEN(DUPLICATE)
	YY_BREAK
case 101:
YY_RULE_SETUP
#line 145 "flex.l"
TOKEN(KEY)
	YY_BREAK
case 102:
YY_RULE_SETUP
#line 146 "flex.l"
TOKEN(RENAME)
	YY_BREAK
case 103:
YY_RULE_SETUP
#line 147 "flex.l"
TOKEN(TO)
	YY_BREAK
case 104:
YY_RULE_SETUP
#line 148 "flex.l"
TOKEN(COLUMN)
	YY_BREAK
case 105:
YY_RULE_SETUP
#line 149 "flex.l"
TOKEN(ADD)
	YY_BREAK
case 106:
YY_RULE_SETUP
#line 150 "flex.l"
TOKEN(PRIMARY)
	YY_BREAK
case 107:
YY_RULE_SETUP
#line 151 "flex.l"
TOKEN(FORCE)
	YY_BREAK
case 108:
YY_RULE_SETUP
#line 152 "flex.l"
TOKEN(DISABLE)
	YY_BREAK
case 109:
YY_RULE_SETUP
#line 153 "flex.l"
TOKEN(KEYS)
	YY_BREAK
case 110:
YY_RULE_SETUP
#line 154 "flex.l"
TOKEN(ENABLE)
	YY_BREAK
case 111:
YY_RULE_SETUP
#line 155 "flex.l"
TOKEN(VALIDATION)
	YY_BREAK
case 112:
YY_RULE_SETUP
#line 156 "flex.l"
TOKEN(WITHOUT)
	YY_BREAK
case 113:
YY_RULE_SETUP
#line 157 "flex.l"
TOKEN(UNIQUE)
	YY_BREAK
case 114:
YY_RULE_SETUP
#line 158 "flex.l"
TOKEN(FOREIGN)
	YY_BREAK
case 115:
YY_RULE_SETUP
#line 159 "flex.l"
TOKEN(FULLTEXT)
	YY_BREAK
case 116:
YY_RULE_SETUP
#line 160 "flex.l"
TOKEN(SPATIAL)
	YY_BREAK
case 117:
YY_RULE_SETUP
#line 161 "flex.l"
TOKEN(NULL)
	YY_BREAK
case 118:
YY_RULE_SETUP
#line 162 "flex.l"
TOKEN(VISIBLE)
	YY_BREAK
case 119:
YY_RULE_SETUP
#line 163 "flex.l"
TOKEN(INVISIBLE)
	YY_BREAK
case 120:
YY_RULE_SETUP
#line 164 "flex.l"
TOKEN(AUTO_INCREMENT)
	YY_BREAK
case 121:
YY_RULE_SETUP
#line 165 "flex.l"
TOKEN(COLUMN_FORMAT)
	YY_BREAK
case 122:
YY_RULE_SETUP
#line 166 "flex.l"
TOKEN(STORAGE)
	YY_BREAK
case 123:
YY_RULE_SETUP
#line 167 "flex.l"
TOKEN(DISK)
	YY_BREAK
case 124:
YY_RULE_SETUP
#line 168 "flex.l"
TOKEN(MEMORY)
	YY_BREAK
case 125:
YY_RULE_SETUP
#line 169 "flex.l"
TOKEN(REFERENCES)
	YY_BREAK
case 126:
YY_RULE_SETUP
#line 170 "flex.l"
TOKEN(MATCH)
	YY_BREAK
case 127:
YY_RULE_SETUP
#line 171 "flex.l"
TOKEN(FULL)
	YY_BREAK
case 128:
YY_RULE_SETUP
#line 172 "flex.l"
TOKEN(PARTIAL)
	YY_BREAK
case 129:
YY_RULE_SETUP
#line 173 "flex.l"
TOKEN(SIMPLE)
	YY_BREAK
case 130:
YY_RULE_SETUP
#line 174 "flex.l"
TOKEN(ACTION)
	YY_BREAK
case 131:
YY_RULE_SETUP
#line 175 "flex.l"
TOKEN(CHECK)
	YY_BREAK
case 132:
YY_RULE_SETUP
#line 176 "flex.l"
TOKEN(CONSTRAINT)
	YY_BREAK
case 133:
YY_RULE_SETUP
#line 177 "flex.l"
TOKEN(ENFORCED)
	YY_BREAK
case 134:
YY_RULE_SETUP
#line 178 "flex.l"
TOKEN(TEMPORARY)
	YY_BREAK
case 135:
YY_RULE_SETUP
#line 179 "flex.l"
TOKEN(OPTION)
	YY_BREAK
case 136:
YY_RULE_SETUP
#line 180 "flex.l"
TOKEN(CASCADED)
	YY_BREAK
case 137:
YY_RULE_SETUP
#line 181 "flex.l"
TOKEN(LOCAL)
	YY_BREAK
case 138:
YY_RULE_SETUP
#line 182 "flex.l"
TOKEN(CAST)
	YY_BREAK
case 139:
YY_RULE_SETUP
#line 183 "flex.l"
TOKEN(OP_SUB)
	YY_BREAK
case 140:
YY_RULE_SETUP
#line 184 "flex.l"
TOKEN(ISNULL)
	YY_BREAK
case 141:
YY_RULE_SETUP
#line 185 "flex.l"
TOKEN(IS)
	YY_BREAK
case 142:
YY_RULE_SETUP
#line 186 "flex.l"
TOKEN(OP_ADD)
	YY_BREAK
case 143:
YY_RULE_SETUP
#line 187 "flex.l"
TOKEN(IN)
	YY_BREAK
case 144:
YY_RULE_SETUP
#line 188 "flex.l"
TOKEN(CASE)
	YY_BREAK
case 145:
YY_RULE_SETUP
#line 189 "flex.l"
TOKEN(END)
	YY_BREAK
case 146:
YY_RULE_SETUP
#line 190 "flex.l"
TOKEN(ELSE)
	YY_BREAK
case 147:
YY_RULE_SETUP
#line 191 "flex.l"
TOKEN(EXISTS)
	YY_BREAK
case 148:
YY_RULE_SETUP
#line 192 "flex.l"
TOKEN(OVER)
	YY_BREAK
case 149:
YY_RULE_SETUP
#line 193 "flex.l"
TOKEN(WHEN)
	YY_BREAK
case 150:
YY_RULE_SETUP
#line 194 "flex.l"
TOKEN(THEN)
	YY_BREAK
case 151:
YY_RULE_SETUP
#line 195 "flex.l"
TOKEN(OP_NOTEQUAL)
	YY_BREAK
case 152:
YY_RULE_SETUP
#line 196 "flex.l"
TOKEN(OP_GREATERTHAN)
	YY_BREAK
case 153:
YY_RULE_SETUP
#line 197 "flex.l"
TOKEN(OP_LESSTHAN)
	YY_BREAK
case 154:
YY_RULE_SETUP
#line 198 "flex.l"
TOKEN(OP_LESSEQ)
	YY_BREAK
case 155:
YY_RULE_SETUP
#line 199 "flex.l"
TOKEN(OP_GREATEREQ)
	YY_BREAK
case 156:
YY_RULE_SETUP
#line 200 "flex.l"
TOKEN(EXTRACT)
	YY_BREAK
case 157:
YY_RULE_SETUP
#line 201 "flex.l"
TOKEN(SECOND)
	YY_BREAK
case 158:
YY_RULE_SETUP
#line 202 "flex.l"
TOKEN(MINUTE)
	YY_BREAK
case 159:
YY_RULE_SETUP
#line 203 "flex.l"
TOKEN(HOUR)
	YY_BREAK
case 160:
YY_RULE_SETUP
#line 204 "flex.l"
TOKEN(DAY)
	YY_BREAK
case 161:
YY_RULE_SETUP
#line 205 "flex.l"
TOKEN(MONTH)
	YY_BREAK
case 162:
YY_RULE_SETUP
#line 206 "flex.l"
TOKEN(YEAR)
	YY_BREAK
case 163:
YY_RULE_SETUP
#line 207 "flex.l"
TOKEN(ARRAY)
	YY_BREAK
case 164:
YY_RULE_SETUP
#line 208 "flex.l"
TOKEN(OP_LBRACKET)
	YY_BREAK
case 165:
YY_RULE_SETUP
#line 209 "flex.l"
TOKEN(OP_RBRACKET)
	YY_BREAK
case 166:
YY_RULE_SETUP
#line 210 "flex.l"
TOKEN(TRUE)
	YY_BREAK
case 167:
YY_RULE_SETUP
#line 211 "flex.l"
TOKEN(FALSE)
	YY_BREAK
case 168:
YY_RULE_SETUP
#line 212 "flex.l"
TOKEN(IF)
	YY_BREAK
case 169:
YY_RULE_SETUP
#line 213 "flex.l"
TOKEN(OP_POINT)
	YY_BREAK
case 170:
YY_RULE_SETUP
#line 214 "flex.l"
TOKEN(OP_MUL)
	YY_BREAK
case 171:
YY_RULE_SETUP
#line 215 "flex.l"
TOKEN(OP_DIVIDE)
	YY_BREAK
case 172:
YY_RULE_SETUP
#line 216 "flex.l"
TOKEN(OP_MOD)
	YY_BREAK
case 173:
YY_RULE_SETUP
#line 217 "flex.l"
TOKEN(OP_XOR)
	YY_BREAK
case 174:
YY_RULE_SETUP
#line 218 "flex.l"
TOKEN(ENUM)
	YY_BREAK
case 175:
YY_RULE_SETUP
#line 219 "flex.l"
TOKEN(BINARY)
	YY_BREAK
case 176:
YY_RULE_SETUP
#line 220 "flex.l"
TOKEN(CHARACTER)
	YY_BREAK
case 177:
YY_RULE_SETUP
#line 221 "flex.l"
TOKEN(CHAR)
	YY_BREAK
case 178:
YY_RULE_SETUP
#line 222 "flex.l"
TOKEN(VARCHAR)
	YY_BREAK
case 179:
YY_RULE_SETUP
#line 223 "flex.l"
TOKEN(TEXT)
	YY_BREAK
case 180:
YY_RULE_SETUP
#line 224 "flex.l"
TOKEN(TINYTEXT)
	YY_BREAK
case 181:
YY_RULE_SETUP
#line 225 "flex.l"
TOKEN(MEDIUMTEXT)
	YY_BREAK
case 182:
YY_RULE_SETUP
#line 226 "flex.l"
TOKEN(LONGTEXT)
	YY_BREAK
case 183:
YY_RULE_SETUP
#line 227 "flex.l"
TOKEN(NATIONAL)
	YY_BREAK
case 184:
YY_RULE_SETUP
#line 228 "flex.l"
TOKEN(NCHAR)
	YY_BREAK
case 185:
YY_RULE_SETUP
#line 229 "flex.l"
TOKEN(INT)
	YY_BREAK
case 186:
YY_RULE_SETUP
#line 230 "flex.l"
TOKEN(INTEGER)
	YY_BREAK
case 187:
YY_RULE_SETUP
#line 231 "flex.l"
TOKEN(SMALLINT)
	YY_BREAK
case 188:
YY_RULE_SETUP
#line 232 "flex.l"
TOKEN(BIGINT)
	YY_BREAK
case 189:
YY_RULE_SETUP
#line 233 "flex.l"
TOKEN(REAL)
	YY_BREAK
case 190:
YY_RULE_SETUP
#line 234 "flex.l"
TOKEN(FLOAT)
	YY_BREAK
case 191:
YY_RULE_SETUP
#line 235 "flex.l"
TOKEN(DOUBLE)
	YY_BREAK
case 192:
YY_RULE_SETUP
#line 236 "flex.l"
TOKEN(PRECISION)
	YY_BREAK
case 193:
YY_RULE_SETUP
#line 237 "flex.l"
TOKEN(DECIMAL)
	YY_BREAK
case 194:
YY_RULE_SETUP
#line 238 "flex.l"
TOKEN(DEC)
	YY_BREAK
case 195:
YY_RULE_SETUP
#line 239 "flex.l"
TOKEN(NUMERIC)
	YY_BREAK
case 196:
YY_RULE_SETUP
#line 240 "flex.l"
TOKEN(BOOLEAN)
	YY_BREAK
case 197:
#line 242 "flex.l"
case 198:
YY_RULE_SETUP
#line 242 "flex.l"
{
	yylval->fval = atof(yytext);
	return SQL_FLOATLITERAL;
	}
	YY_BREAK
case 199:
YY_RULE_SETUP
#line 247 "flex.l"
{
	yylval->ival = atol(yytext);
	return SQL_INTLITERAL;
	}
	YY_BREAK
case 200:
YY_RULE_SETUP
#line 252 "flex.l"
{
	std::string s(yytext);
	yylval->sval = strdup(s.substr(1, s.size()-1).c_str());
	return SQL_STRINGLITERAL;
	}
	YY_BREAK
case 201:
YY_RULE_SETUP
#line 258 "flex.l"
{
	yylval->sval = strdup(yytext);
	return SQL_IDENTIFIER;
	}
	YY_BREAK
case 202:
YY_RULE_SETUP
#line 263 "flex.l"
{
	BEGIN singlequotedstring; strbuf = std::stringstream{}; strbuf << '\'';
	}
	YY_BREAK
case 203:
YY_RULE_SETUP
#line 267 "flex.l"
{
	strbuf << '\'';
	}
	YY_BREAK
case 204:
/* rule 204 can match eol */
YY_RULE_SETUP
#line 271 "flex.l"
{
	strbuf << yytext;
	}
	YY_BREAK
case 205:
YY_RULE_SETUP
#line 275 "flex.l"
{
	BEGIN 0; 
	strbuf << '\'';
	yylval->sval = strdup(strbuf.str().c_str());
	return SQL_STRINGLITERAL;
	}
	YY_BREAK
case YY_STATE_EOF(singlequotedstring):
#line 282 "flex.l"
{
	return 0;
	}
	YY_BREAK
case 206:
/* rule 206 can match eol */
YY_RULE_SETUP
#line 286 "flex.l"
{
	}
	YY_BREAK
case 207:
YY_RULE_SETUP
#line 288 "flex.l"
{
	return 0;
	}
	YY_BREAK
case 208:
YY_RULE_SETUP
#line 292 "flex.l"
ECHO;
	YY_BREAK
#line 2720 "flex_lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( yywrap( yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of yylex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	char *source = yyg->yytext_ptr;
	int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr - 1);

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			int num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yyrealloc( (void *) b->yy_ch_buf,
							 (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = NULL;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin  , yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		int new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) yyrealloc(
			(void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, (yy_size_t) new_size , yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
		/* "- 2" to take care of EOB's */
		YY_CURRENT_BUFFER_LVALUE->yy_buf_size = (int) (new_size - 2);
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	yy_state_type yy_current_state;
	char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 791 )
				yy_c = yy_meta[yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	char *yy_cp = yyg->yy_c_buf_p;

	YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 791 )
			yy_c = yy_meta[yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + yy_c];
	yy_is_jam = (yy_current_state == 790);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

#ifndef YY_NO_UNPUT

#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr);
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin , yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap( yyscanner ) )
						return 0;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void yyrestart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        yyensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer( yyin, YY_BUF_SIZE , yyscanner);
	}

	yy_init_buffer( YY_CURRENT_BUFFER, input_file , yyscanner);
	yy_load_buffer_state( yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		yypop_buffer_state();
	 *		yypush_buffer_state(new_buffer);
     */
	yyensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	yy_load_buffer_state( yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void yy_load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yyalloc( (yy_size_t) (b->yy_buf_size + 2) , yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file , yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 * @param yyscanner The scanner object.
 */
    void yy_delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yyfree( (void *) b->yy_ch_buf , yyscanner );

	yyfree( (void *) b , yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_flush_buffer( b , yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then yy_init_buffer was _probably_
     * called from yyrestart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void yy_flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		yy_load_buffer_state( yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void yypush_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	yyensure_buffer_stack(yyscanner);

	/* This block is copied from yy_switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from yy_switch_to_buffer. */
	yy_load_buffer_state( yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void yypop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	yy_delete_buffer(YY_CURRENT_BUFFER , yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		yy_load_buffer_state( yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void yyensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
      num_to_alloc = 1; /* After all that talk, this was set to 1 anyways... */
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyalloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));

		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		yy_size_t grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)yyrealloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in yyensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return NULL;

	b = (YY_BUFFER_STATE) yyalloc( sizeof( struct yy_buffer_state ) , yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = (int) (size - 2);	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = NULL;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b , yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to yylex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       yy_scan_bytes() instead.
 */
YY_BUFFER_STATE yy_scan_string (const char * yystr , yyscan_t yyscanner)
{
    
	return yy_scan_bytes( yystr, (int) strlen(yystr) , yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to yylex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = (yy_size_t) (_yybytes_len + 2);
	buf = (char *) yyalloc( n , yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n , yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yynoreturn yy_fatal_error (const char* msg , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE yyget_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int yyget_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int yyget_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *yyget_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
int yyget_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *yyget_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void yyset_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param _line_number line number
 * @param yyscanner The scanner object.
 */
void yyset_lineno (int  _line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_lineno called with no buffer" );
    
    yylineno = _line_number;
}

/** Set the current column.
 * @param _column_no column number
 * @param yyscanner The scanner object.
 */
void yyset_column (int  _column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "yyset_column called with no buffer" );
    
    yycolumn = _column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param _in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see yy_switch_to_buffer
 */
void yyset_in (FILE *  _in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = _in_str ;
}

void yyset_out (FILE *  _out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = _out_str ;
}

int yyget_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void yyset_debug (int  _bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = _bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * yyget_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void yyset_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *yyget_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void yyset_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* yylex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */
int yylex_init(yyscan_t* ptr_yy_globals)
{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* yylex_init_extra has the same functionality as yylex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to yyalloc in
 * the yyextra field.
 */
int yylex_init_extra( YY_EXTRA_TYPE yy_user_defined, yyscan_t* ptr_yy_globals )
{
    struct yyguts_t dummy_yyguts;

    yyset_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) yyalloc ( sizeof( struct yyguts_t ), &dummy_yyguts );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    yyset_extra (yy_user_defined, *ptr_yy_globals);

    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from yylex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = NULL;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = NULL;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = NULL;
    yyout = NULL;
#endif

    /* For future reference: Set errno on error, since we are called by
     * yylex_init()
     */
    return 0;
}

/* yylex_destroy is for both reentrant and non-reentrant scanners. */
int yylex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		yy_delete_buffer( YY_CURRENT_BUFFER , yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		yypop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	yyfree(yyg->yy_buffer_stack , yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        yyfree( yyg->yy_start_stack , yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * yylex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    yyfree ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, const char * s2, int n , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (const char * s , yyscan_t yyscanner)
{
	int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *yyalloc (yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	return malloc(size);
}

void *yyrealloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;

	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return realloc(ptr, size);
}

void yyfree (void * ptr , yyscan_t yyscanner)
{
	struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	(void)yyg;
	free( (char *) ptr );	/* see yyrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 292 "flex.l"


